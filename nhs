#!/usr/bin/env python

import argparse
import json
from multiprocessing import Pool, Process
import sys
import time

import os

def parse_cli_args():
        parser = argparse.ArgumentParser(description='Health check all the things!')
        parser.add_argument('-c', '--config', required=False, type=str,
                            default='config.json', help='Config file (duuh).')
        return parser.parse_args()


def read_config(config_f):
        with open(config_f, 'r') as fh:
                return json.load(fh)


class ProcessWrapper(object):

        def __init__(self, **kwargs):
                self.proc = Process(**kwargs)
                self.all_args = kwargs

        def keep_alive(self):
                if not self.proc.is_alive() and self.proc.exitcode is not None:
                        self.proc = Process(**self.all_args)
                        self.proc.start()
                elif not self.proc.is_alive():
                        self.proc.start()

        def stop(self):
                if self.proc.is_alive():
                        self.proc.terminate()


class HealthyHost(object):

        def __init__(self, cfg):
                self.config = cfg
                self.processes = map(self.prepare_process, cfg)


        def prepare_process(self, cfg):
                return ProcessWrapper(target=self.cycki, args=('bob',))


        def cycki(self, hurr):
                while True:
                        print os.getpid()
                        time.sleep(10)


        def start(self):
                map(lambda p: p.keep_alive(), self.processes)


        def stop(self):
                def stop_proc(proc):
                        proc.stop()
                map(stop_proc, self.processes)


def loop(config):
        healthy = HealthyHost(config['Healthy'])
        while True:
                if all(Pool(5).map(health_check, config['HealthCheck'])):
                        healthy.start()
                else:
                        healthy.stop()
                time.sleep(5)


def hc_url(cfg):
        return True


def hc_tcp(cfg):
        return True


def hc_shell(cfg):
        import random
        win = random.randint(0, 2) % 2 == 0
        print win
        return win


def health_check(cfg):
        handle_hc = {"URL": hc_url,
                     "TCP": hc_tcp,
                     "Shell": hc_shell}
        for opt in handle_hc.keys():
                if opt in cfg:
                        return handle_hc[opt](cfg)
        sys.stderr.write("Don't know how to handle health check: {}\n".format(cfg))
        return False


if __name__ == "__main__":
        args = parse_cli_args()
        cfg = read_config(args.config)

        loop(cfg)

